<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Origheart</title>
    <link>https://example.org/post/index.xml</link>
    <description>Recent content in Post-rsses on Origheart</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 May 2015 15:30:27 +0800</lastBuildDate>
    <atom:link href="https://example.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>iOS常用小技巧（经常更新）</title>
      <link>https://example.org/post/2015-05-10-ios-skills/</link>
      <pubDate>Sun, 10 May 2015 15:30:27 +0800</pubDate>
      
      <guid>https://example.org/post/2015-05-10-ios-skills/</guid>
      <description>

&lt;h3 id=&#34;循环效果&#34;&gt;循环效果:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;self.count++;
self.count %= 4;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以实现0～4的循环效果，替换了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;if(self.count==4) self.count = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;计算动画当前移动的值-相似三角形&#34;&gt;计算动画当前移动的值：（相似三角形）&lt;/h3&gt;

&lt;p&gt;开始值 + 当前帧数 * (结束值 - 开始值) / (帧频 * 动画时长)&lt;/p&gt;

&lt;h3 id=&#34;ios7下不让view渗透到navigationbar或tabbar的下面&#34;&gt;iOS7下不让view渗透到NavigationBar或TabBar的下面：&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;if ([self respondsToSelector:@selector(edgesForExtendedLayout)]) {
        self.edgesForExtendedLayout = UIRectEdgeNone;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;自定义控件&#34;&gt;自定义控件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;创建一个继承UIView的一个类&lt;/li&gt;
&lt;li&gt;创建一个空的Xib名称根类名称一样&lt;/li&gt;
&lt;li&gt;往xib里面拖一个UIView把UIView的Class修改为自定义的类型&lt;/li&gt;
&lt;li&gt;往这个View里面拖进各种控件&lt;/li&gt;
&lt;li&gt;把里面的控件根代码进行关联&lt;/li&gt;
&lt;li&gt;在用到的地方用[NSBundle mainBundle]来加载控件 切记不要用initWithFrame的方法来加载&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;TRHeaderView *hv = [[[NSBundle mainBundle]loadNibNamed:@&amp;quot;TRHeaderView&amp;quot; owner:self options:Nil]lastObject];
    hv.wb = wb;
    self.tableView.tableHeaderView = hv;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;在scrollview里面整齐的放入表情-类似于qq的表情放置方法&#34;&gt;在scrollView里面整齐的放入表情，类似于QQ的表情放置方法：&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;- (void)viewDidLoad
{
    [super viewDidLoad];
 
    self.faces = [NSArray arrayWithContentsOfFile:@&amp;quot;/Users/liukang/Main/Origheart/face/emoticons.plist&amp;quot;];
    
    for (int i=0; i&amp;lt;self.faces.count; i++) {
        NSDictionary *faceDic = self.faces[i];
        NSString *imageName = [faceDic objectForKey:@&amp;quot;png&amp;quot;];
        UIButton *btn = [[UIButton alloc]initWithFrame:CGRectMake(i%8*40, i/8*40, 40, 40)];
        btn.tag = i;
        [btn setImage:[UIImage imageNamed:imageName] forState:UIControlStateNormal];
        [btn addTarget:self action:@selector(clicked:) forControlEvents:UIControlEventTouchUpInside];
        [self.mySV addSubview:btn];
        int row = self.faces.count%8==0?self.faces.count/8 :self.faces.count/8+1;
        [self.mySV setContentSize:CGSizeMake(0, row*40)];
    }
}
-(void)clicked:(UIButton *)btn{
    NSDictionary *faceDic = self.faces[btn.tag];
    NSString *text = [faceDic objectForKey:@&amp;quot;chs&amp;quot;];
    
    self.myTF.text = [self.myTF.text stringByAppendingString:text];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;用storyboard-当启动次数-记录在userdefaults中-是偶数的时候将根视图控制器设置为其他vc&#34;&gt;用storyboard，当启动次数(记录在Userdefaults中)是偶数的时候将根视图控制器设置为其他VC&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    NSUserDefaults *ud = [NSUserDefaults standardUserDefaults];
    int runTimes = [ud integerForKey:@&amp;quot;runTimes&amp;quot;];
    
    if (runTimes%2==0) {
        UIViewController *vc = [self.window.rootViewController.storyboard instantiateViewControllerWithIdentifier:@&amp;quot;greenvc&amp;quot;];
        
        self.window.rootViewController = vc;

    }
    [ud setInteger:++runTimes forKey:@&amp;quot;runTimes&amp;quot;];
    [ud synchronize];
    return YES;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;present多个view-controller后-回到第一个view-controller的方法&#34;&gt;present多个view controller后，回到第一个view controller的方法：&lt;/h3&gt;

&lt;p&gt;present: A-&amp;gt;B-&amp;gt;C dismiss:C-&amp;gt;A,不显示出B：
在B的viewDidLoad里面加入收听通知，实现响应方法，并在适当的地方移除收听：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(back:) name:@&amp;quot;TestComplete&amp;quot; object:nil];
- (IBAction)back:(id)sender {
    [self dismissViewControllerAnimated:YES completion:nil];
}
- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在C dismiss的时候发送通知：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;[[NSNotificationCenter defaultCenter] postNotificationName:@&amp;quot;TestComplete&amp;quot; object:nil];
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>iOS捕获app crash日志的Api</title>
      <link>https://example.org/post/2015-04-12-ios-app-crash-log/</link>
      <pubDate>Sun, 12 Apr 2015 13:30:27 +0800</pubDate>
      
      <guid>https://example.org/post/2015-04-12-ios-app-crash-log/</guid>
      <description>&lt;p&gt;定义uncaughtExceptionHandler方法:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;void uncaughtExceptionHandler( NSException   *exception) 
{
    // 异常的堆栈信息
    NSArray *stackArray = [exception callStackSymbols];
    // 出现异常的原因
    NSString *reason = [exception reason];
    // 异常名称
    NSString *name = [exception name];
    NSString *exceptionInfo = [NSString stringWithFormat:@&amp;quot;Exception reason：%@\nException name：%@\nException stack：%@&amp;quot;,name, reason, stackArray];
    NSLog(@&amp;quot;%@&amp;quot;, exceptionInfo);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用方法的时机:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;- (BOOL) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary*)launchOptions
{
   // 设置处理异常的Handler
    NSSetUncaughtExceptionHandler(&amp;amp;uncaughtExceptionHandler);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>那些一般人不会告诉你的提升做事效率的方法</title>
      <link>https://example.org/post/2015-04-11-improve-efficiency/</link>
      <pubDate>Sat, 11 Apr 2015 15:30:27 +0800</pubDate>
      
      <guid>https://example.org/post/2015-04-11-improve-efficiency/</guid>
      <description>&lt;p&gt;工作以来，就喜欢琢磨一些提升自己做事效率的方法，积累了一段时间，也看了很多相关的书籍与文章后，感到有了很大的收获，分享给各位，希望对大家有所帮助。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、躺在床上的时候，不要玩手机。&lt;/strong&gt;大学的时候喜欢在床上玩手机，结果经常会不知不觉玩到很晚，第二天经常会因为睡眠不足而精力不足。现在，躺在床上的时候就把手机放在一旁，睡眠效率提升很多。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、永远不要在起床的时候看邮件，也永远不要在睡前看邮件。&lt;/strong&gt;对我来说，我一般一天只在 3 个时间点去处理邮件，中午 11 点，下午 2 点，下午 6 点。此外，极其重要的一点是，&lt;code&gt;你的邮箱的收件箱不应该是一个未完成事件列表，你应该要做到及时清空，如果是该做的任务（那就加入待办事项），如果是重要的文件（那就转存 Evernote 中或者存档），如果是无用文件（那就应该马上删除），千万不能把自己的邮箱弄的一团糟。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、2 分钟法则：如果一件事情，在 2 分钟内可以处理完，那么就马上着手解决它。&lt;/strong&gt;因为很多这样的事情，甚至没必要排到待做事项当中，越早解决，越节省时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、5 分钟法则：治疗拖延症的最好方法，不是去设立各种各样的任务，也不是去下载各种各样的时间管理软件，而是告诉自己开始去尝试做个 5 分钟试试看就可以了。&lt;/strong&gt;当你坐下来做个 5 分钟，你会发现你自己不知不觉就做下去了，很多事情没你想象的那么困难。所以，如果，你有什么一直想做却一直没做的事情的话，就坐下来做个 5 分钟试试看吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、好记性不如烂笔头。&lt;/strong&gt;当自己的脑海中有什么好的想法的时候，马上写下来。永远记住，写下来的东西，才是你的。而且，在写的时候也可以整理自己大脑中的想法，使之更加完善。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6、你是想做事情，还是想把事情做完。&lt;/strong&gt;读书时代，完成老师布置的作业的时候，想的是什么时候能够做完，而不是去思考我在这个作业当中发现了哪些不足，以及自己从中获得了哪些收获。刚开始工作时，也把这种不好的习惯带了过来，经常以为只要把事情解决了，就可以了。后来才发现，比把事情做完更重要的，是你在做这件事情当中的收获与成长，而这，会在很大程度上影响你以后的发展。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7、良好的睡眠、饮食、运动习惯，会在很大程度上提升你的工作效率。&lt;/strong&gt;只有吃好、睡好、锻炼好，工作才能更加有效率。如非必要，不要熬夜，熬夜真的真的很伤身体。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8、学会按优先级处理事情。&lt;/strong&gt;在工作当中，经常会有很多任务同时向你砸过来的情况发生。这种时候，咱们就需要按照优先级的方法对任务进行排序，然后分批处理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9、以终为始。&lt;/strong&gt;当你不知道该做什么的时候，想一想你要去的终点，这在很大程度上会告诉你现在该做什么。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10、学会拒绝。&lt;/strong&gt;什么时候该拒绝，什么时候不该拒绝，用什么方法去拒绝等等，其实是一本书都讲不完的东西，以后有时间的话再和大家分享。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11、教是最好的学。&lt;/strong&gt;作为一个学生去学习一个东西，和作为一个老师去学一个东西然后教会自己的学生，是两个截然不同的概念。后者，会极大的提升你的学习效率。如果你想学一个东西，可以尝试去教别人怎么学这东西。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://example.org/post/2015-04-11-hello-world/</link>
      <pubDate>Sat, 11 Apr 2015 13:30:27 +0800</pubDate>
      
      <guid>https://example.org/post/2015-04-11-hello-world/</guid>
      <description>

&lt;pre&gt;&lt;code&gt;print(&amp;quot;Hello world!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;前前后后折腾了2天时间，终于把自己的blog建起来了。此站点是通过&lt;code&gt;Hugo&lt;/code&gt;创建的。从创建到购买域名，到部署，到上线。其中有一些曲折的过程，最开始不知道如何着手，我去学习Python，通过哪种方式创建了一个简易的博客，但是并不美观，最终还是选择了&lt;code&gt;Hugo&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;博客还有很多不完整以及很多细节不够好的地方，以后我会慢慢调整慢慢学习。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;我将在这里做什么&#34;&gt;我将在这里做什么&lt;/h2&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;分享自己的一些编程经验，并与大家交流&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;无聊时在这儿打发时间，记录自己生活中的那些开心与不开心的事儿&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;介绍自己做过的一些项目&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;收集iOS开发的技术文摘&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;记录自己的学习和成长过程&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>